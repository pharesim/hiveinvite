#!/usr/bin/python3
# -*- coding: UTF-8 -*-

import sys
sys.path.append('si')

import mailer
import db
import api
import errorHandler

import cgi
import uuid
import time
import datetime

def insert_invite(inviteid, label, email, address, mailtext, hivepower, validity, username, usermail, remaining):
  db.insert('invites',{'inviteid':inviteid,'label':label,'email':email,'address':address,'mailtext':mailtext,'steempower':hivepower,'validity':validity,'username':username,'usermail':usermail,'remaining':remaining})

def public_invite(inviteid, responset, description, ask_phone, ask_mail, ask_reddit, ask_fb, ask_twitt, ask_insta):
  db.insert('publics',{'inviteid':inviteid,'responset':responset,'description':description,'ask_phone':ask_phone,'ask_mail':ask_mail,'ask_reddit':ask_reddit,'ask_fb':ask_fb,'ask_twitt':ask_twitt,'ask_insta':ask_insta})

# output variable
invites = []

# get and set variables
inviteid   = uuid.uuid4().hex
form       = cgi.FieldStorage()
label      = form.getvalue('label')
email      = form.getvalue('email')
address    = form.getvalue('address')
mailtext   = form.getvalue('mailtext')
amount     = form.getvalue('amount')
remaining  = form.getvalue('multi')
public     = form.getvalue('public')
responset  = form.getvalue('response_time')
descript   = form.getvalue('pub_description')
ask_phone  = form.getvalue('require_phone')
ask_mail   = form.getvalue('require_email')
ask_reddit = form.getvalue('require_reddit')
ask_fb     = form.getvalue('require_facebook')
ask_twitt  = form.getvalue('require_twitter')
ask_insta  = form.getvalue('require_instagram')
hivepower  = form.getvalue('sp')
validity   = form.getvalue('validity')
username   = form.getvalue('username')
usermail   = form.getvalue('usermail')
nowts      = time.time()

# routinely delete old entries
results = db.select('invites',['inviteid','created','validity'],'accepted is null','created DESC')
for result in results:
  createdts = time.mktime(datetime.datetime.strptime(result['created'], "%Y-%m-%d %H:%M:%S").timetuple())
  validtill = createdts + (result['validity'] * 60 * 60 * 24)
  if validtill < nowts:
    db.delete('invites',{'inviteid':result['inviteid']})
    pub = db.select('publics',['inviteid'],{'inviteid':result['inviteid']},'inviteid')
    for res in pub:
      db.delete('publics',{'inviteid':result['inviteid']})

# save a new entry
if username and usermail:

  # check if email address has a valid invite already
  if email == 'true':
    results = db.select('invites',['inviteid'],{'address':address},'address')
    if len(results) > 0:
      errorHandler.throwError("E-Mail address already invited")

  # check if label is unique
  results = db.select('invites',['label'],{'username':username,'label':label},'label')
  if len(results) > 0:
    errorHandler.throwError("You are using this label already")

  # write
  if email != 'true':
    mailtext = ''
  if int(amount) > 1:
    for x in range(int(amount)):
      inviteid = uuid.uuid4().hex
      batchlabel = label+'.'+str(x+1)
      insert_invite(inviteid, batchlabel, email, address, mailtext, hivepower, validity, username, usermail, remaining)
      if public == 'true':
        public_invite(inviteid, responset, descript, ask_phone, ask_mail, ask_reddit, ask_fb, ask_twitt, ask_insta)
  else:
    insert_invite(inviteid, label, email, address, mailtext, hivepower, validity, username, usermail, remaining)
    if public == 'true':
      public_invite(inviteid, responset, descript, ask_phone, ask_mail, ask_reddit, ask_fb, ask_twitt, ask_insta)

  # send invitation mail
  if email == 'true':
    try:
      mailer.sendmail(address,'You have been invited to join the Hive blockchain',mailtext+"\n\nhttps://hiveinvite.com/accept.html?inviteid="+inviteid)
    except Exception as e:
      db.delete('invites',{'inviteid':inviteid})
      errorHandler.throwError("Failed sending E-Mail. If this keeps happening, create the invitation without, and send the resulting link yourself. Also notice @pharesim."+str(e))

# get invites
if username != None:
  qfields = ['inviteid', 'label', 'address', 'steempower', 'validity', 'created', 'accepted', 'account', 'username', 'owner', 'active', 'posting', 'memo', 'remaining']
  results = db.select('invites',qfields,{'username':username},'created DESC')
  for result in results:
    validtill = time.mktime(datetime.datetime.strptime(result['created'], "%Y-%m-%d %H:%M:%S").timetuple()) + (result['validity'] * 60 * 60 * 24)
    invites.append({
      'inviteid':result['inviteid'],
      'label':result['label'],
      'address':result['address'],
      'hivepower':result['steempower'],
      'validity': datetime.datetime.fromtimestamp(validtill).strftime('%Y-%m-%d %H:%M:%S'),
      'created':result['created'],
      'accepted':result['accepted'],
      'account':result['account'],
      'username':result['username'],
      'owner':result['owner'],
      'active':result['active'],
      'posting':result['posting'],
      'memo':result['memo'],
      'remaining':result['remaining']
    })

api.output(invites)
